'nlme',            # get p values for mixed effect model
'DescTools',       # get Cramer's V
'dplyr',           # package to move columns around
'Hmisc',
'sjstats'
)
## read in data:
# if importing from Qualtrics: (i) export data as numeric values, and (ii) delete rows 2 and 3 of the .csv file.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
d <- read.csv('e9_deflection_1350.csv')
## explore dataframe:
dim(d) # will provide dimensions of the dataframe by row [1] and column [2]
colnames(d) # will provide all column names
summary(d)
## perform attention exclusions:
# this will remove responses from the dataframe that failed attention checks (i.e., "1" or "2")
d <- subset(d, (d$att1 == 2 & d$att2 == 2))
dim(d) # number of participants should decrease after attention exclusions
## split up dataframes between AV and HDV conditions
## this is necessary before comprehension exclusions
d_AV_intv <- subset(d, (d$FL_92_DO == "FL_94"))
d_HDV_intv <- subset(d, (d$FL_98_DO == "FL_100"))
d_AV_no_intv <- subset(d, (d$FL_92_DO == "FL_93"))
d_HDV_no_intv <- subset(d, (d$FL_98_DO == "FL_99"))
## get number of participants BEFORE exclusions:
n_original <- dim(d)[1] # extracting number of rows only, not columns
n_original_AV_intv <- dim(d_AV_intv)[1]
n_original_HDV_intv <- dim(d_HDV_intv)[1]
n_original_AV_no_intv <- dim(d_AV_no_intv)[1]
n_original_HDV_no_intv <- dim(d_HDV_no_intv)[1]
## perform comprehension exclusions separately for AV and HDV:
# this will remove responses from the dataframe that failed comprehension checks (i.e., "2")
d_AV_intv <- subset(d_AV_intv, (d_AV_intv$comp1 == 1 & d_AV_intv$comp_accident == 1))
d_HDV_intv <- subset(d_HDV_intv, (d_HDV_intv$comp1 == 2 & d_HDV_intv$comp_accident == 1))
d_AV_no_intv <- subset(d_AV_no_intv, (d_AV_no_intv$comp1 == 1 & d_AV_no_intv$comp_accident == 1))
d_HDV_no_intv <- subset(d_HDV_no_intv, (d_HDV_no_intv$comp1 == 2 & d_HDV_no_intv$comp_accident == 1))
## perform exclusions for intervention
d_AV_intv <- subset(d_AV_intv, (d_AV_intv$intv_check_AV == "1,2"))
d_HDV_intv <- subset(d_HDV_intv, (d_HDV_intv$intv_check == "1,2"))
## get number of participants AFTER exclusions:
n_final_AV_intv <- dim(d_AV_intv)[1] # extracting number of rows only, not columns
n_final_HDV_intv <- dim(d_HDV_intv)[1]
n_final_AV_no_intv <- dim(d_AV_no_intv)[1]
n_final_HDV_no_intv <- dim(d_HDV_no_intv)[1]
n_final <- n_final_AV_intv + n_final_HDV_intv + n_final_AV_no_intv + n_final_HDV_no_intv
percent_excluded <- (n_original - n_final)/n_original
percent_excluded_AV_intv <- (n_original_AV_intv - n_final_AV_intv)/n_original_AV_intv
percent_excluded_HDV_intv <- (n_original_HDV_intv - n_final_HDV_intv)/n_original_HDV_intv
percent_excluded_AV_no_intv <- (n_original_AV_no_intv - n_final_AV_no_intv)/n_original_AV_no_intv
percent_excluded_HDV_no_intv <- (n_original_HDV_no_intv - n_final_HDV_no_intv)/n_original_HDV_no_intv
## remove unused columns (other condition and click info) according to condition
d_AV_intv <- d_AV_intv[-c(21:33,34:42,48:76)] # first=prior columns, second=click, third=all other columns
d_HDV_intv <- d_HDV_intv[-c(21:61,62:70)] # first=prior columns, second=click info
d_AV_no_intv <- d_AV_no_intv[-c(21:28,34:76)] # first=click columns, second=later columns
d_HDV_no_intv <- d_HDV_no_intv[-c(21:47,48:55,62:76)] # first=prior columns, second=click info
## duplicate AV condition vB liability column to match with HDV condition driver liability col
d_AV_intv$vB_mf_sue_AV_intv_2 <- d_AV_intv$vB_mf_sue_AV_intv_1
d_AV_intv <- d_AV_intv %>% relocate(vB_mf_sue_AV_intv_2, .after=vB_mf_sue_AV_intv_1)
d_AV_no_intv$vB_mf_sue_AV_2 <- d_AV_no_intv$vB_mf_sue_AV_1
d_AV_no_intv <- d_AV_no_intv %>% relocate(vB_mf_sue_AV_2, .after=vB_mf_sue_AV_1)
## get mean age and gender:
mean_age = mean(as.numeric(d$age), na.rm = TRUE) # removing NAs from the dataframe before computing mean
gender = table(d$gender)["1"]/sum(table(d$gender)) # percent male
## define new data frame to extract pre-processed data into:
d_subset <- array(dim=c(n_final, 10))
colnames(d_subset) <- c('agent_name', 'intv_appld', 'vA_sue', 'vB_m_v_d_sue', 'vB_m_v_m_sue',
'vA_cntrfctl', 'vB_cntrfctl', 'avoid', 'comp1', 'comp2')
d_subset <- as.data.frame(d_subset, stringsAsFactors=FALSE)
## extract good data from the middle part of raw data in AV + intervention
for(i in 1:n_final_AV_intv) {
curr <- d_AV_intv[i,21:28][!is.na(d_AV_intv[i,21:28])] # for a given row, get only the non-NA values
d_subset[i,3:10] <- as.numeric(curr[curr!= ""]) # and only the non-empty values
#d_subset[i,1] <- d_AV[i,43][!is.na(d_AV[i,43])]
d_subset[i,1] <- "av"
d_subset[i,2] <- "yes"
}
## extract good data from the middle part of raw data in HDV + intervention
for(i in 1:n_final_HDV_intv) {
j = i+n_final_AV_intv
curr <- d_HDV_intv[i,21:28][!is.na(d_HDV_intv[i,21:28])] # for a given row, get only the non-NA values
d_subset[j,3:10] <- as.numeric(curr) # and only the non-empty values
d_subset[j,1] <- "human"
d_subset[j,2] <- "yes"
}
## extract good data from the middle part of raw data in AV + no intervention
for(i in 1:n_final_AV_no_intv) {
j = i+n_final_AV_intv+n_final_HDV_intv
curr <- d_AV_no_intv[i,21:28][!is.na(d_AV_no_intv[i,21:28])] # for a given row, get only the non-NA values
d_subset[j,3:10] <- as.numeric(curr) # and only the non-empty values
d_subset[j,1] <- "av"
d_subset[j,2] <- "no"
}
## extract good data from the middle part of raw data in HDV + no intervention
for(i in 1:n_final_HDV_no_intv) {
j = i+n_final_AV_intv+n_final_HDV_intv+n_final_AV_no_intv
curr <- d_HDV_no_intv[i,21:28][!is.na(d_HDV_no_intv[i,21:28])] # for a given row, get only the non-NA values
d_subset[j,3:10] <- as.numeric(curr) # and only the non-empty values
d_subset[j,1] <- "human"
d_subset[j,2] <- "no"
}
## just to keep the df names straight for next section
d_merged <- d_subset
# agent_n where av=1, human=2; intv_n where yes=1, no=2
d_merged$agent_n <- ifelse(d_merged$agent_name=="av", 1, 2)
d_merged$intv_n <- ifelse(d_merged$intv_appld=="yes", 1, 2)
#### get summary statistics
d_merged %>%
group_by(intv_appld, agent_name) %>%
get_summary_stats(vB_m_v_d_sue, type = "mean_sd")
d_merged %>%
group_by(intv_appld, agent_name) %>%
get_summary_stats(vB_m_v_m_sue, type = "mean_sd")
d_merged %>%
group_by(intv_appld, agent_name) %>%
get_summary_stats(vB_cntrfctl, type = "mean_sd")
d_merged %>%
group_by(intv_appld, agent_name) %>%
get_summary_stats(avoid, type = "mean_sd")
### manufacturer vs manufacturer
m_v_m_mod <- aov(vB_m_v_m_sue ~ as.factor(agent_n) * as.factor(intv_n), data = d_merged)
summary(m_v_m_mod)
anova_stats(m_v_m_mod)
d_merged %>%
group_by(intv_appld, agent_name) %>%
get_summary_stats(vB_m_v_m_sue, type = "mean_sd")
t.test(vB_m_v_m_sue ~ agent_name, data = d_merged, paired = FALSE)
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## install packages
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('ggplot2',         # plotting
'ggsignif',        # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # probably not using..
'tidyr',           # tools for cleaning messy data
'stringr',         # perform string substitutions easily
'assertthat',      # allows me to check whether a variable is a string, with is.string
'lsmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',       # get Cramer's V
'dplyr',           # package to move columns around
'Hmisc',
'sjstats'
)
## read in data:
# if importing from Qualtrics: (i) export data as numeric values, and (ii) delete rows 2 and 3 of the .csv file.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
d <- read.csv('e6_countf_constr_900.csv')
## explore dataframe:
dim(d) # will provide dimensions of the dataframe by row [1] and column [2]
colnames(d) # will provide all column names
summary(d)
## perform attention exclusions:
# this will remove responses from the dataframe that failed attention checks (i.e., "1" or "2")
d <- subset(d, (d$att1 == 2 & d$att2 == 2))
dim(d) # number of participants should decrease after attention exclusions
## split up dataframes between AV and HDV conditions
## this is necessary before comprehension exclusions
d_AV_cnstr <- subset(d, (d$FL_4_DO == "FL_39"))
d_HDV_cnstr <- subset(d, (d$FL_4_DO == "FL_40"))
d_AV_uncnstr <- subset(d, (d$FL_4_DO == "FL_54"))
d_HDV_uncnstr <- subset(d, (d$FL_4_DO == "FL_58"))
## get number of participants BEFORE exclusions:
n_original <- dim(d)[1] # extracting number of rows only, not columns
n_original_AV_cnstr <- dim(d_AV_cnstr)[1]
n_original_HDV_cnstr <- dim(d_HDV_cnstr)[1]
n_original_AV_uncnstr <- dim(d_AV_uncnstr)[1]
n_original_HDV_uncnstr <- dim(d_HDV_uncnstr)[1]
## perform comprehension exclusions separately for AV and HDV:
# this will remove responses from the dataframe that failed comprehension checks (i.e., "2")
d_AV_cnstr <- subset(d_AV_cnstr, (d_AV_cnstr$comp1 == 1 & d_AV_cnstr$comp_accident == 1))
d_HDV_cnstr <- subset(d_HDV_cnstr, (d_HDV_cnstr$comp1 == 2 & d_HDV_cnstr$comp_accident == 1))
d_AV_uncnstr <- subset(d_AV_uncnstr, (d_AV_uncnstr$comp1 == 1 & d_AV_uncnstr$comp_accident == 1))
d_HDV_uncnstr <- subset(d_HDV_uncnstr, (d_HDV_uncnstr$comp1 == 2 & d_HDV_uncnstr$comp_accident == 1))
dim(d_AV_cnstr) # number of participants should decrease after comprehension exclusions
dim(d_HDV_cnstr)
dim(d_AV_uncnstr)
dim(d_HDV_uncnstr)
## get number of participants AFTER exclusions:
n_final_AV_cnstr <- dim(d_AV_cnstr)[1] # extracting number of rows only, not columns
n_final_HDV_cnstr <- dim(d_HDV_cnstr)[1]
n_final_AV_uncnstr <- dim(d_AV_uncnstr)[1]
n_final_HDV_uncnstr <- dim(d_HDV_uncnstr)[1]
n_final <- n_final_AV_cnstr + n_final_HDV_cnstr + n_final_AV_uncnstr + n_final_HDV_uncnstr
percent_excluded <- (n_original - n_final)/n_original
percent_excluded_AV_cnstr <- (n_original_AV_cnstr - n_final_AV_cnstr)/n_original_AV_cnstr
percent_excluded_HDV_cnstr <- (n_original_HDV_cnstr - n_final_HDV_cnstr)/n_original_HDV_cnstr
percent_excluded_AV_uncnstr <- (n_original_AV_uncnstr - n_final_AV_uncnstr)/n_original_AV_uncnstr
percent_excluded_HDV_uncnstr <- (n_original_HDV_uncnstr - n_final_HDV_uncnstr)/n_original_HDV_uncnstr
## remove unused columns (other condition and click info) according to condition
d_AV_cnstr <- d_AV_cnstr[-c(21:28,34:74)] # first=click info, second=all other columns
d_HDV_cnstr <- d_HDV_cnstr[-c(21:33,34:41,48:74)] # first=prior columns, second=click info, third=later columns
d_AV_uncnstr <- d_AV_uncnstr[-c(21:47,48:55,61:74)] # first=prior columns, second=click info, third=later columns
d_HDV_uncnstr <- d_HDV_uncnstr[-c(21:60,61:68)] # first=prior columns, second=click info
## duplicate AV condition vB liability column to match with HDV condition driver liability col
d_AV_cnstr$vB_frm_liab_AV_cnstr_2 <- d_AV_cnstr$vB_frm_liab_AV_cnstr_1
d_AV_cnstr <- d_AV_cnstr %>% relocate(vB_frm_liab_AV_cnstr_2, .after=vB_frm_liab_AV_cnstr_1)
d_AV_uncnstr$vB_frm_liab_AV_2 <- d_AV_uncnstr$vB_frm_liab_AV_1
d_AV_uncnstr <- d_AV_uncnstr %>% relocate(vB_frm_liab_AV_2, .after=vB_frm_liab_AV_1)
## get mean age and gender:
mean_age = mean(as.numeric(d$age), na.rm = TRUE) # removing NAs from the dataframe before computing mean
gender = table(d$gender)["1"]/sum(table(d$gender)) # percent male
## define new data frame to extract pre-processed data into:
d_subset <- array(dim=c(n_final, 11))
colnames(d_subset) <- c('agent_name', 'scen_name', 'vA_liable', 'vB_m_v_d_liable', 'vB_m_v_m_liable', 'vA_cntrfctl', 'vB_cntrfctl',
'avoid', 'comp1', 'comp2', 'age')
d_subset <- as.data.frame(d_subset, stringsAsFactors=FALSE)
## extract good data from the middle part of raw data in AV constrained
for(i in 1:n_final_AV_cnstr) {
curr <- d_AV_cnstr[i,21:28][!is.na(d_AV_cnstr[i,21:28])] # for a given row, get only the non-NA values
d_subset[i,3:10] <- as.numeric(curr[curr!= ""]) # and only the non-empty values
#d_subset[i,1] <- d_AV[i,43][!is.na(d_AV[i,43])]
d_subset[i,11] <- as.numeric(d_AV_cnstr$age[i])
d_subset[i,1] <- "av"
d_subset[i,2] <- "cnstr"
}
## extract good data from the middle part of raw data in HDV constrained
for(i in 1:n_final_HDV_cnstr) {
j = i+n_final_AV_cnstr
curr <- d_HDV_cnstr[i,21:28][!is.na(d_HDV_cnstr[i,21:28])] # for a given row, get only the non-NA values
d_subset[j,3:10] <- as.numeric(curr) # and only the non-empty values
d_subset[j,11] <- as.numeric(d_HDV_cnstr$age[i])
d_subset[j,1] <- "human"
d_subset[j,2] <- "cnstr"
}
## extract good data from the middle part of raw data in AV unconstrained
for(i in 1:n_final_AV_uncnstr) {
j = i+n_final_AV_cnstr+n_final_HDV_cnstr
curr <- d_AV_uncnstr[i,21:28][!is.na(d_AV_uncnstr[i,21:28])] # for a given row, get only the non-NA values
d_subset[j,3:10] <- as.numeric(curr) # and only the non-empty values
d_subset[j,11] <- as.numeric(d_AV_uncnstr$age[i])
d_subset[j,1] <- "av"
d_subset[j,2] <- "uncnstr"
}
## extract good data from the middle part of raw data in HDV unconstrained
for(i in 1:n_final_HDV_uncnstr) {
j = i+n_final_AV_cnstr+n_final_HDV_cnstr+n_final_AV_uncnstr
curr <- d_HDV_uncnstr[i,21:28][!is.na(d_HDV_uncnstr[i,21:28])] # for a given row, get only the non-NA values
d_subset[j,3:10] <- as.numeric(curr) # and only the non-empty values
d_subset[j,11] <- as.numeric(d_HDV_uncnstr$age[i])
d_subset[j,1] <- "human"
d_subset[j,2] <- "uncnstr"
}
## just to keep the df names straight for next section
d_merged <- d_subset
# cond_n where av=1, human=2
d_merged$agent_n <- ifelse(d_merged$agent_name=="av", 1, 2)
d_merged$scen_n <- ifelse(d_merged$scen_name=="cnstr", 1, 2)
### LIABILITY ANOVA
## MANUFACTURER VS DRIVER --------
## get summary statistics
d_merged %>%
group_by(agent_n) %>%
get_summary_stats(vB_m_v_d_liable, type = "mean_sd")
mean(d_merged$vB_m_v_d_liable[d_merged$scen_name=="cnstr" & d_merged$agent_name == "human"])
## anova
m_v_d_mod <- aov(vB_m_v_d_liable ~ as.factor(agent_n) * as.factor(scen_n), data = d_merged)
summary(m_v_d_mod)
anova_stats(m_v_d_mod)
## anova
m_v_m_mod <- aov(vB_m_v_m_liable ~ as.factor(agent_n) * as.factor(scen_n), data = d_merged)
summary(m_v_m_mod)
anova_stats(m_v_m_mod)
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## install packages
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('ggplot2',         # plotting
'ggsignif',        # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # probably not using..
'tidyr',           # tools for cleaning messy data
'stringr',         # perform string substitutions easily
'assertthat',      # allows me to check whether a variable is a string, with is.string
'lsmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',       # get Cramer's V
'dplyr',           # package to move columns around
'Hmisc',
'sjstats'
)
## read in data:
# if importing from Qualtrics: (i) export data as numeric values, and (ii) delete rows 2 and 3 of the .csv file.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
d <- read.csv('e9_deflection_1350.csv')
## explore dataframe:
dim(d) # will provide dimensions of the dataframe by row [1] and column [2]
colnames(d) # will provide all column names
summary(d)
## perform attention exclusions:
# this will remove responses from the dataframe that failed attention checks (i.e., "1" or "2")
d <- subset(d, (d$att1 == 2 & d$att2 == 2))
dim(d) # number of participants should decrease after attention exclusions
## split up dataframes between AV and HDV conditions
## this is necessary before comprehension exclusions
d_AV_intv <- subset(d, (d$FL_92_DO == "FL_94"))
d_HDV_intv <- subset(d, (d$FL_98_DO == "FL_100"))
d_AV_no_intv <- subset(d, (d$FL_92_DO == "FL_93"))
d_HDV_no_intv <- subset(d, (d$FL_98_DO == "FL_99"))
## get number of participants BEFORE exclusions:
n_original <- dim(d)[1] # extracting number of rows only, not columns
n_original_AV_intv <- dim(d_AV_intv)[1]
n_original_HDV_intv <- dim(d_HDV_intv)[1]
n_original_AV_no_intv <- dim(d_AV_no_intv)[1]
n_original_HDV_no_intv <- dim(d_HDV_no_intv)[1]
## perform comprehension exclusions separately for AV and HDV:
# this will remove responses from the dataframe that failed comprehension checks (i.e., "2")
d_AV_intv <- subset(d_AV_intv, (d_AV_intv$comp1 == 1 & d_AV_intv$comp_accident == 1))
d_HDV_intv <- subset(d_HDV_intv, (d_HDV_intv$comp1 == 2 & d_HDV_intv$comp_accident == 1))
d_AV_no_intv <- subset(d_AV_no_intv, (d_AV_no_intv$comp1 == 1 & d_AV_no_intv$comp_accident == 1))
d_HDV_no_intv <- subset(d_HDV_no_intv, (d_HDV_no_intv$comp1 == 2 & d_HDV_no_intv$comp_accident == 1))
## perform exclusions for intervention
d_AV_intv <- subset(d_AV_intv, (d_AV_intv$intv_check_AV == "1,2"))
d_HDV_intv <- subset(d_HDV_intv, (d_HDV_intv$intv_check == "1,2"))
## get number of participants AFTER exclusions:
n_final_AV_intv <- dim(d_AV_intv)[1] # extracting number of rows only, not columns
n_final_HDV_intv <- dim(d_HDV_intv)[1]
n_final_AV_no_intv <- dim(d_AV_no_intv)[1]
n_final_HDV_no_intv <- dim(d_HDV_no_intv)[1]
n_final <- n_final_AV_intv + n_final_HDV_intv + n_final_AV_no_intv + n_final_HDV_no_intv
percent_excluded <- (n_original - n_final)/n_original
percent_excluded_AV_intv <- (n_original_AV_intv - n_final_AV_intv)/n_original_AV_intv
percent_excluded_HDV_intv <- (n_original_HDV_intv - n_final_HDV_intv)/n_original_HDV_intv
percent_excluded_AV_no_intv <- (n_original_AV_no_intv - n_final_AV_no_intv)/n_original_AV_no_intv
percent_excluded_HDV_no_intv <- (n_original_HDV_no_intv - n_final_HDV_no_intv)/n_original_HDV_no_intv
## remove unused columns (other condition and click info) according to condition
d_AV_intv <- d_AV_intv[-c(21:33,34:42,48:76)] # first=prior columns, second=click, third=all other columns
d_HDV_intv <- d_HDV_intv[-c(21:61,62:70)] # first=prior columns, second=click info
d_AV_no_intv <- d_AV_no_intv[-c(21:28,34:76)] # first=click columns, second=later columns
d_HDV_no_intv <- d_HDV_no_intv[-c(21:47,48:55,62:76)] # first=prior columns, second=click info
## duplicate AV condition vB liability column to match with HDV condition driver liability col
d_AV_intv$vB_mf_sue_AV_intv_2 <- d_AV_intv$vB_mf_sue_AV_intv_1
d_AV_intv <- d_AV_intv %>% relocate(vB_mf_sue_AV_intv_2, .after=vB_mf_sue_AV_intv_1)
d_AV_no_intv$vB_mf_sue_AV_2 <- d_AV_no_intv$vB_mf_sue_AV_1
d_AV_no_intv <- d_AV_no_intv %>% relocate(vB_mf_sue_AV_2, .after=vB_mf_sue_AV_1)
## get mean age and gender:
mean_age = mean(as.numeric(d$age), na.rm = TRUE) # removing NAs from the dataframe before computing mean
gender = table(d$gender)["1"]/sum(table(d$gender)) # percent male
## define new data frame to extract pre-processed data into:
d_subset <- array(dim=c(n_final, 10))
colnames(d_subset) <- c('agent_name', 'intv_appld', 'vA_sue', 'vB_m_v_d_sue', 'vB_m_v_m_sue',
'vA_cntrfctl', 'vB_cntrfctl', 'avoid', 'comp1', 'comp2')
d_subset <- as.data.frame(d_subset, stringsAsFactors=FALSE)
## extract good data from the middle part of raw data in AV + intervention
for(i in 1:n_final_AV_intv) {
curr <- d_AV_intv[i,21:28][!is.na(d_AV_intv[i,21:28])] # for a given row, get only the non-NA values
d_subset[i,3:10] <- as.numeric(curr[curr!= ""]) # and only the non-empty values
#d_subset[i,1] <- d_AV[i,43][!is.na(d_AV[i,43])]
d_subset[i,1] <- "av"
d_subset[i,2] <- "yes"
}
## extract good data from the middle part of raw data in HDV + intervention
for(i in 1:n_final_HDV_intv) {
j = i+n_final_AV_intv
curr <- d_HDV_intv[i,21:28][!is.na(d_HDV_intv[i,21:28])] # for a given row, get only the non-NA values
d_subset[j,3:10] <- as.numeric(curr) # and only the non-empty values
d_subset[j,1] <- "human"
d_subset[j,2] <- "yes"
}
## extract good data from the middle part of raw data in AV + no intervention
for(i in 1:n_final_AV_no_intv) {
j = i+n_final_AV_intv+n_final_HDV_intv
curr <- d_AV_no_intv[i,21:28][!is.na(d_AV_no_intv[i,21:28])] # for a given row, get only the non-NA values
d_subset[j,3:10] <- as.numeric(curr) # and only the non-empty values
d_subset[j,1] <- "av"
d_subset[j,2] <- "no"
}
## extract good data from the middle part of raw data in HDV + no intervention
for(i in 1:n_final_HDV_no_intv) {
j = i+n_final_AV_intv+n_final_HDV_intv+n_final_AV_no_intv
curr <- d_HDV_no_intv[i,21:28][!is.na(d_HDV_no_intv[i,21:28])] # for a given row, get only the non-NA values
d_subset[j,3:10] <- as.numeric(curr) # and only the non-empty values
d_subset[j,1] <- "human"
d_subset[j,2] <- "no"
}
## just to keep the df names straight for next section
d_merged <- d_subset
# agent_n where av=1, human=2; intv_n where yes=1, no=2
d_merged$agent_n <- ifelse(d_merged$agent_name=="av", 1, 2)
d_merged$intv_n <- ifelse(d_merged$intv_appld=="yes", 1, 2)
#### get summary statistics
d_merged %>%
group_by(intv_appld, agent_name) %>%
get_summary_stats(vB_m_v_d_sue, type = "mean_sd")
d_merged %>%
group_by(intv_appld, agent_name) %>%
get_summary_stats(vB_m_v_m_sue, type = "mean_sd")
d_merged %>%
group_by(intv_appld, agent_name) %>%
get_summary_stats(vB_cntrfctl, type = "mean_sd")
d_merged %>%
group_by(intv_appld, agent_name) %>%
get_summary_stats(avoid, type = "mean_sd")
##### ----- ANOVA -----
### manufacturer vs driver
m_v_d_mod <- aov(vB_m_v_d_sue ~ as.factor(agent_n) * as.factor(intv_n), data = d_merged)
### manufacturer vs manufacturer
m_v_m_mod <- aov(vB_m_v_m_sue ~ as.factor(agent_n) * as.factor(intv_n), data = d_merged)
summary(m_v_m_mod)
anova_stats(m_v_m_mod)
t.test(d_merged$vB_m_v_m_sue[d_merged$intv_appld=="yes" & d_merged$agent_name == "av"],
d_merged$vB_m_v_m_sue[d_merged$intv_appld=="yes" & d_merged$agent_name == "human"], paired=FALSE)
# when intervention, do av and human differ
vB_m_v_m_sue_T_intv <- t.test(d_merged$vB_m_v_m_sue[d_merged$intv_appld=="yes" & d_merged$agent_name == "av"],
d_merged$vB_m_v_m_sue[d_merged$intv_appld=="yes" & d_merged$agent_name == "human"], paired=FALSE)
vB_m_v_m_sue_T_intv$p.value
# when no intervention, do av and human differ
vB_m_v_m_sue_T_no_intv <- t.test(d_merged$vB_m_v_m_sue[d_merged$intv_appld=="no" & d_merged$agent_name == "av"],
d_merged$vB_m_v_m_sue[d_merged$intv_appld=="no" & d_merged$agent_name == "human"], paired=FALSE)
vB_m_v_m_sue_T_no_intv$p.value
t.test(d_merged$vB_m_v_m_sue[d_merged$intv_appld=="no" & d_merged$agent_name == "av"],
d_merged$vB_m_v_m_sue[d_merged$intv_appld=="no" & d_merged$agent_name == "human"], paired=FALSE)
cohen.d(d_merged[d_merged$intv_appld=="no", ]$vB_m_v_m_sue, d_merged[d_merged$intv_appld=="no", ]$agent_name)
d_merged$vB_m_v_m_sue[d_merged$intv_appld=="no" & d_merged$agent_name == "human"])
cohen.d(d_merged[d_merged$vB_m_v_m_sue[d_merged$intv_appld=="no" & d_merged$agent_name == "av"],
d_merged$vB_m_v_m_sue[d_merged$intv_appld=="no" & d_merged$agent_name == "human"]))
cohen.d(d_merged$vB_m_v_m_sue[d_merged$intv_appld=="no" & d_merged$agent_name == "av"],
d_merged$vB_m_v_m_sue[d_merged$intv_appld=="no" & d_merged$agent_name == "human"])
##### ----- ANOVA -----
### manufacturer vs driver
m_v_d_mod <- aov(vB_m_v_d_sue ~ as.factor(agent_n) * as.factor(intv_n), data = d_merged)
summary(m_v_d_mod)
anova_stats(m_v_d_mod)
t.test(vB_m_v_d_sue ~ agent_name, data = d_merged, paired = FALSE)
t.test(d_merged$vB_m_v_d_sue[d_merged$intv_appld=="yes" & d_merged$agent_name == "av"],
d_merged$vB_m_v_d_sue[d_merged$intv_appld=="yes" & d_merged$agent_name == "human"], paired=FALSE)
cohen.d(d_merged[d_merged$intv_appld=="yes", ]$vB_m_v_d_sue, d_merged[d_merged$intv_appld=="yes", ]$agent_name)
cohen.d(d_merged$vB_m_v_d_sue[d_merged$intv_appld=="yes" & d_merged$agent_name == "av"],
d_merged$vB_m_v_d_sue[d_merged$intv_appld=="yes" & d_merged$agent_name == "human"])
t.test(d_merged$vB_m_v_d_sue[d_merged$intv_appld=="no" & d_merged$agent_name == "av"],
d_merged$vB_m_v_d_sue[d_merged$intv_appld=="no" & d_merged$agent_name == "human"], paired=FALSE)
t.test(d_merged$vB_m_v_m_sue[d_merged$intv_appld=="no" & d_merged$agent_name == "av"],
d_merged$vB_m_v_m_sue[d_merged$intv_appld=="no" & d_merged$agent_name == "human"], paired=FALSE)
t.test(d_merged$vB_m_v_d_sue[d_merged$intv_appld=="no" & d_merged$agent_name == "av"],
d_merged$vB_m_v_d_sue[d_merged$intv_appld=="no" & d_merged$agent_name == "human"], paired=FALSE)
cohen.d(d_merged[d_merged$intv_appld=="no", ]$vB_m_v_d_sue, d_merged[d_merged$intv_appld=="no", ]$agent_name)
cohen.d(d_merged$vB_m_v_d_sue[d_merged$intv_appld=="no" & d_merged$agent_name == "av"],
d_merged$vB_m_v_d_sue[d_merged$intv_appld=="no" & d_merged$agent_name == "human"])
t.test(d_merged$vA_sue[d_merged$intv_appld=="yes" & d_merged$agent_name == "av"],
d_merged$vA_sue[d_merged$intv_appld=="yes" & d_merged$agent_name == "human"], paired=FALSE)
cohens.d(d_merged$vA_sue[d_merged$intv_appld=="yes" & d_merged$agent_name == "av"],
d_merged$vA_sue[d_merged$intv_appld=="yes" & d_merged$agent_name == "human"])
cohen.d(d_merged$vA_sue[d_merged$intv_appld=="yes" & d_merged$agent_name == "av"],
d_merged$vA_sue[d_merged$intv_appld=="yes" & d_merged$agent_name == "human"])
t.test(d_merged$vA_sue[d_merged$intv_appld=="no" & d_merged$agent_name == "av"],
d_merged$vA_sue[d_merged$intv_appld=="no" & d_merged$agent_name == "human"], paired=FALSE)
cohen.d(d_merged$vA_sue[d_merged$intv_appld=="no" & d_merged$agent_name == "av"],
d_merged$vA_sue[d_merged$intv_appld=="no" & d_merged$agent_name == "human"])
t.test(d_merged$vA_sue[d_merged$intv_appld=="yes" & d_merged$agent_name == "av"],
d_merged$vA_sue[d_merged$intv_appld=="yes" & d_merged$agent_name == "human"], paired=FALSE)
t.test(d_merged$vA_sue[d_merged$intv_appld=="no" & d_merged$agent_name == "av"],
d_merged$vA_sue[d_merged$intv_appld=="no" & d_merged$agent_name == "human"], paired=FALSE)
t.test(d_merged$vB_m_v_m_sue[d_merged$intv_appld=="yes" & d_merged$agent_name == "av"],
d_merged$vB_m_v_m_sue[d_merged$intv_appld=="yes" & d_merged$agent_name == "human"], paired=FALSE)
cohen.d(d_merged$vB_m_v_m_sue[d_merged$intv_appld=="yes" & d_merged$agent_name == "av"],
d_merged$vB_m_v_m_sue[d_merged$intv_appld=="yes" & d_merged$agent_name == "human"])
t.test(d_merged$vA_cntrfctl[d_merged$intv_appld=="yes" & d_merged$agent_name == "av"],
d_merged$vA_cntrfctl[d_merged$intv_appld=="yes" & d_merged$agent_name == "human"], paired=FALSE)
cohen.d(d_merged$vA_cntrfctl[d_merged$intv_appld=="yes" & d_merged$agent_name == "av"],
d_merged$vA_cntrfctl[d_merged$intv_appld=="yes" & d_merged$agent_name == "human"])
t.test(d_merged$vA_cntrfctl[d_merged$intv_appld=="no" & d_merged$agent_name == "av"],
d_merged$vA_cntrfctl[d_merged$intv_appld=="no" & d_merged$agent_name == "human"], paired=FALSE)
cohen.d(d_merged$vA_cntrfctl[d_merged$intv_appld=="no" & d_merged$agent_name == "av"],
d_merged$vA_cntrfctl[d_merged$intv_appld=="no" & d_merged$agent_name == "human"])
t.test(d_merged$vB_cntrfctl[d_merged$intv_appld=="yes" & d_merged$agent_name == "av"],
d_merged$vB_cntrfctl[d_merged$intv_appld=="yes" & d_merged$agent_name == "human"], paired=FALSE)
cohen.d(d_merged$vB_cntrfctl[d_merged$intv_appld=="yes" & d_merged$agent_name == "av"],
d_merged$vB_cntrfctl[d_merged$intv_appld=="yes" & d_merged$agent_name == "human"])
t.test(d_merged$vB_cntrfctl[d_merged$intv_appld=="no" & d_merged$agent_name == "av"],
d_merged$vB_cntrfctl[d_merged$intv_appld=="no" & d_merged$agent_name == "human"], paired=FALSE)
cohen.d(d_merged$vB_cntrfctl[d_merged$intv_appld=="no" & d_merged$agent_name == "av"],
d_merged$vB_cntrfctl[d_merged$intv_appld=="no" & d_merged$agent_name == "human"])
t.test(d_merged$avoid[d_merged$intv_appld=="yes" & d_merged$agent_name == "av"],
d_merged$avoid[d_merged$intv_appld=="yes" & d_merged$agent_name == "human"], paired=FALSE)
cohen.d(d_merged$avoid[d_merged$intv_appld=="yes" & d_merged$agent_name == "av"],
d_merged$avoid[d_merged$intv_appld=="yes" & d_merged$agent_name == "human"])
# when no intervention, do av and human differ
avoid_T_no_intv <- t.test(d_merged$avoid[d_merged$intv_appld=="no" & d_merged$agent_name == "av"],
d_merged$avoid[d_merged$intv_appld=="no" & d_merged$agent_name == "human"], paired=FALSE)
t.test(d_merged$avoid[d_merged$intv_appld=="no" & d_merged$agent_name == "av"],
d_merged$avoid[d_merged$intv_appld=="no" & d_merged$agent_name == "human"], paired=FALSE)
cohen.d(d_merged$avoid[d_merged$intv_appld=="no" & d_merged$agent_name == "av"],
d_merged$avoid[d_merged$intv_appld=="no" & d_merged$agent_name == "human"])
cor(d_merged[,3:8])
source("../process.R")
# MODERATED SERIAL MEDIATION
#  agent -> counterfactual -> avoid -> sue (moderated by intervention)
# 87 = B path, 83 = A path, 91 = center path
process(data = d_merged, y = "vB_m_v_m_sue", x = "agent_n",
m =c("vB_cntrfctl", "avoid"), w = "intv_n", model = 83, effsize =1, total =1, stand =1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
process(data = d_merged, y = "vB_m_v_d_sue", x = "agent_n",
m =c("vB_cntrfctl", "avoid"), w = "intv_n", model = 83, effsize =1, total =1, stand =1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
